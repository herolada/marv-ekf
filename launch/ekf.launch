<!--
     This launch file provides an example of how to work with GPS data using robot_localization. It runs three nodes:
       (1) An EKF instance that fuses odometry and IMU data and outputs an odom-frame state estimate
       (2) A second EKF instance that fuses the same data, but also fuses the transformed GPS data from (3)
       (3) An instance of navsat_transform_node, which takes in GPS data and produces pose data that has been
           transformed into your robot's world frame (here, map). The node produces a map-frame state estimate.

       The first EKF instance produces the odom->base_link transform. The second EKF produces the map->odom transform,
       but requires the odom->base_link transform from the first instance in order to do so. See the
       params/dual_ekf_navsat_example.yaml file for parameter specification.
-->

<launch>

    <node pkg="tf2_ros" type="static_transform_publisher" name="gps_static_pub"
        args="0 0 0 0 0 0 1 gps_antenna gps" />

    <!-- COMPASS -->
    <arg name="nodelet_manager" default="" doc="If nonempty, the name of the nodelet manager to load the nodelets into." />
    <arg name="frame" default="base_link" doc="The frame in which the azimuth should be computed." />
    <arg name="unbias" default="true" doc="When true, magnetometer bias observer and remover will be launched." />
    <arg name="low_pass_ratio" default="" doc="Low pass smoothing ratio. 0 = raw measurements, 1 = no updates." />
    <arg name="visualize" default="true" doc="Whether to publish a visualization of the azimuth" />

    <node name="compass_nodelet_manager" pkg="cras_cpp_common" type="nodelet_manager_sharing_tf_buffer" respawn="true" if="$(eval nodelet_manager == '')" />

    <arg name="nodelet_manager_name" value="compass_nodelet_manager" if="$(eval nodelet_manager == '')" />
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager)" if="$(eval nodelet_manager != '')" />

    <include file="$(find magnetometer_pipeline)/launch/magnetometer_proc.launch" pass_all_args="true" if="$(arg unbias)">
        <arg name="nodelet_manager" value="$(arg nodelet_manager_name)" />
    </include>

    <node name="compass" pkg="nodelet" type="nodelet" args="load magnetometer_compass/magnetometer_compass $(arg nodelet_manager_name)" respawn="true">
        <param name="~publish_true_azimuth_enu_imu" value="True" />
        <param name="frame" value="$(arg frame)" />
        <param name="low_pass_ratio" value="$(arg low_pass_ratio)" if="$(eval low_pass_ratio != '')" />
        <param name="subscribe_mag_unbiased" value="$(arg unbias)" />
        <remap from="gps/fix" to="fix" />
    </node>

    <node name="visualize_azimuth" pkg="nodelet" type="nodelet" args="load magnetometer_compass/visualize_azimuth $(arg nodelet_manager_name)" respawn="true" if="$(arg visualize)">
        <remap from="~azimuth" to="compass/mag/ned/deg" />
        <remap from="~azimuth_vis" to="compass/vis" />
        <remap from="gps/fix" to="fix" />
        <param name="max_rate" value="10" />
    </node>


    <!-- EKF -->
    <rosparam command="load" file="$(find ekf)/params/localization.yaml" />

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
        <remap from="odometry/filtered" to="gps_odom"/>
    </node>

    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true">
        <remap from="gps/fix" to="fix"/>
        <remap from="imu" to="compass/true/enu/imu"/>
        <remap from="odometry/filtered" to="gps_odom"/>
    </node>

    <!-- COVARIANCE HANDLING -->
    <node pkg="ekf" type="ekf_covariance_setter_node" name="ekf_covariance_setter_node">
        <param name="cov_value" value="1e-2" />
    </node>

</launch>